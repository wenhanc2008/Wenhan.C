/*
 * This file is generated by jOOQ.
 */
package org.example.generated.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.example.generated.Keys;
import org.example.generated.Public;
import org.example.generated.tables.records.YoutubeCacheRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>public.youtube_cache</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class YoutubeCache extends TableImpl<YoutubeCacheRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.youtube_cache</code>
     */
    public static final YoutubeCache YOUTUBE_CACHE = new YoutubeCache();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<YoutubeCacheRecord> getRecordType() {
        return YoutubeCacheRecord.class;
    }

    /**
     * The column <code>public.youtube_cache.query</code>.
     */
    public final TableField<YoutubeCacheRecord, String> QUERY = createField(DSL.name("query"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.youtube_cache.results</code>.
     */
    public final TableField<YoutubeCacheRecord, JSONB> RESULTS = createField(DSL.name("results"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>public.youtube_cache.created_at</code>.
     */
    public final TableField<YoutubeCacheRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private YoutubeCache(Name alias, Table<YoutubeCacheRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private YoutubeCache(Name alias, Table<YoutubeCacheRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.youtube_cache</code> table reference
     */
    public YoutubeCache(String alias) {
        this(DSL.name(alias), YOUTUBE_CACHE);
    }

    /**
     * Create an aliased <code>public.youtube_cache</code> table reference
     */
    public YoutubeCache(Name alias) {
        this(alias, YOUTUBE_CACHE);
    }

    /**
     * Create a <code>public.youtube_cache</code> table reference
     */
    public YoutubeCache() {
        this(DSL.name("youtube_cache"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<YoutubeCacheRecord> getPrimaryKey() {
        return Keys.YOUTUBE_CACHE_PKEY;
    }

    @Override
    public YoutubeCache as(String alias) {
        return new YoutubeCache(DSL.name(alias), this);
    }

    @Override
    public YoutubeCache as(Name alias) {
        return new YoutubeCache(alias, this);
    }

    @Override
    public YoutubeCache as(Table<?> alias) {
        return new YoutubeCache(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public YoutubeCache rename(String name) {
        return new YoutubeCache(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public YoutubeCache rename(Name name) {
        return new YoutubeCache(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public YoutubeCache rename(Table<?> name) {
        return new YoutubeCache(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public YoutubeCache where(Condition condition) {
        return new YoutubeCache(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public YoutubeCache where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public YoutubeCache where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public YoutubeCache where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public YoutubeCache where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public YoutubeCache where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public YoutubeCache where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public YoutubeCache where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public YoutubeCache whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public YoutubeCache whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
