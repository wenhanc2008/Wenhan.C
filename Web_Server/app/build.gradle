/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.2/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java'
    id 'application'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.springframework.boot' version '3.3.5'
    id "org.jooq.jooq-codegen-gradle" version "3.19.15"
}
apply plugin: 'io.spring.dependency-management'

group = 'com.example'
version = '0.0.1-SNAPSHOT'


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'
    implementation 'org.springframework.boot:spring-boot-starter-json'
    implementation 'org.postgresql:postgresql:42.7.4'   // PostgreSQL 驱动
    implementation 'org.jooq:jooq:3.19.15'             // JOOQ 核心库
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.jooq:jooq-meta:3.19.15'
    implementation 'org.jooq:jooq-codegen:3.19.15'// JPA 支持
    implementation 'io.github.cdimascio:dotenv-java:3.0.0'
}
    // Use JUnit Jupiter for testing.


// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.Application'
}
// Apply a specific Java toolchain to ease working on different environments.

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

/*task generateJooq(type: JavaExec) {
    group = 'code generation'
    description = 'Generate JOOQ classes'

    mainClass = 'org.example.Codegen'  // 主类全限定名
    classpath = sourceSets.main.runtimeClasspath
    doLast {
        println "JOOQ code generation completed."
    }
}*/




